# Login

mutation login($account: String!, $password: String!) {
    login(account: $account, password: $password)
}

# Info

query whoAmI {
    whoAmI { account, name, role }
}

query distributionInfo {
    distributionInfo { distribution, title, version { distribution, developerBuild, clientBuild } }
}

# Developer Versions

query developerVersionsInfo ($service: String, $version: DeveloperVersionInput) {
    developerVersionsInfo (service: $service, version: $version) {
        service, version { distribution, build }, buildInfo { author, sources { name, git { url, branch, cloneSubmodules } }, time, comment }
    }
}

query developerDesiredVersions {
    developerDesiredVersions { service, version { distribution, build } }
}

query developerDesiredVersionsHistory ($limit: Int!) {
    developerDesiredVersionsHistory (limit: $limit) { time, author, versions { service, version { distribution, build } } }
}

query providerDesiredVersions ($distribution: String!) {
    providerDesiredVersions (distribution: $distribution) { service, version { distribution, build } }
}

mutation lastCommitComment ($service: String!) {
    lastCommitComment (service: $service)
}

mutation buildDeveloperVersion ($service: String!, $version: DeveloperVersionInput!,
                                $comment: String!, $buildClientVersion: Boolean!) {
    buildDeveloperVersion (service: $service, version: $version, comment: $comment, buildClientVersion: $buildClientVersion)
}

mutation addDeveloperVersionInfo ($info: DeveloperVersionInfoInput!) {
    addDeveloperVersionInfo (info: $info)
}

mutation removeDeveloperVersion ($service: String!, $version: DeveloperDistributionVersionInput!) {
    removeDeveloperVersion (service: $service, version: $version)
}

mutation setDeveloperDesiredVersions ($versions: [DeveloperDesiredVersionDeltaInput!]!) {
    setDeveloperDesiredVersions (versions: $versions)
}

# Tested Versions

mutation setTestedVersions ($versions: [DeveloperDesiredVersionInput!]!) {
    setTestedVersions (versions: $versions)
}

query testedVersions {
    testedVersions {
        service, version { distribution, build }
    }
}

mutation setProviderTestedVersions ($distribution: String!, $versions: [DeveloperDesiredVersionInput!]!) {
    setProviderTestedVersions (distribution: $distribution, versions: $versions)
}

query providerTestedVersions ($distribution: String!) {
    providerTestedVersions (distribution: $distribution) {
        service, version { distribution, build }
    }
}

# Client Versions

query clientVersionsInfo ($service: String, $version: ClientVersionInput) {
    clientVersionsInfo (service: $service, version: $version) {
        service, version { distribution, developerBuild, clientBuild }, buildInfo { author, sources { name, git { url, branch, cloneSubmodules } }, time, comment }, installInfo { account, time }
    }
}

query clientDesiredVersions {
    clientDesiredVersions { service, version { distribution, developerBuild, clientBuild } }
}

query clientDesiredVersionsHistory ($limit: Int!) {
    clientDesiredVersionsHistory (limit: $limit) { time, author, versions { service, version { distribution, developerBuild, clientBuild } } }
}

query clientDesiredVersion ($service: String!) {
    clientDesiredVersions (services: [$service]) { service, version { distribution, developerBuild, clientBuild } }
}

query installedDesiredVersions ($distribution: String!) {
    installedDesiredVersions (distribution: $distribution) {
        service, version { distribution, developerBuild, clientBuild }
    }
}

mutation buildClientVersions ($versions: [DeveloperDesiredVersionInput!]!) {
    buildClientVersions (versions: $versions)
}

mutation addClientVersionInfo ($info: ClientVersionInfoInput!) {
    addClientVersionInfo (info: $info)
}

mutation removeClientVersion ($service: String!, $version: ClientDistributionVersionInput!) {
    removeClientVersion (service: $service, version: $version)
}

mutation setClientDesiredVersions ($versions: [ClientDesiredVersionDeltaInput!]!) {
    setClientDesiredVersions (versions: $versions)
}

# States

query serviceStates ($distribution: String!) {
    serviceStates (distribution: $distribution) {
        distribution, instance, service, directory, state { time, installTime, startTime, version { distribution, developerBuild, clientBuild }, updateToVersion { distribution, developerBuild, clientBuild }, updateError { critical, error }, failuresCount, lastExitCode }
    }
}

# Logs

query logServices {
    logServices
}

query logInstances($service: String!) {
    logInstances (service: $service)
}

query logDirectories($service: String!, $instance: String!) {
    logDirectories (service: $service, instance: $instance)
}

query logProcesses($service: String!, $instance: String!, $directory: String!) {
    logProcesses (service: $service, instance: $instance, directory: $directory)
}

query logLevels($service: String, $instance: String, $directory: String, $process: String, $task: String) {
    logLevels (service: $service, instance: $instance, directory: $directory, process: $process, task: $task)
}

query logsStartTime($service: String, $instance: String, $directory: String, $process: String, $task: String) {
    logsStartTime (service: $service, instance: $instance, directory: $directory, process: $process, task: $task)
}

query logsEndTime($service: String, $instance: String, $directory: String, $process: String, $task: String) {
    logsEndTime (service: $service, instance: $instance, directory: $directory, process: $process, task: $task)
}

query taskLogs ($task: String!,
        $from: BigInt, $to: BigInt, $fromTime: Date, $toTime: Date, $levels: [String!], $find: String, $limit: Int) {
    logs (task: $task,
        from: $from, to: $to, fromTime: $fromTime, toTime: $toTime, levels: $levels, find: $find, limit: $limit) {
        sequence, instance, directory, process, time, level, unit, message, terminationStatus
    }
}

query serviceLogs ($service: String!,
             $from: BigInt, $to: BigInt, $fromTime: Date, $toTime: Date, $levels: [String!], $find: String, $limit: Int) {
    logs (service: $service,
        from: $from, to: $to, fromTime: $fromTime, toTime: $toTime, levels: $levels, find: $find, limit: $limit) {
            sequence, instance, directory, process, time, level, unit, message, terminationStatus
    }
}

query instanceLogs ($service: String!, $instance: String!,
             $from: BigInt, $to: BigInt, $fromTime: Date, $toTime: Date, $levels: [String!], $find: String, $limit: Int) {
    logs (service: $service, instance: $instance,
        from: $from, to: $to, fromTime: $fromTime, toTime: $toTime, levels: $levels, find: $find, limit: $limit) {
            sequence, directory, process, time, level, unit, message, terminationStatus
    }
}

query directoryLogs ($service: String!, $instance: String!, $directory: String!,
             $from: BigInt, $to: BigInt, $fromTime: Date, $toTime: Date, $levels: [String!], $find: String, $limit: Int) {
    logs (service: $service, instance: $instance, directory: $directory,
        from: $from, to: $to, fromTime: $fromTime, toTime: $toTime, levels: $levels, find: $find, limit: $limit) {
            sequence, process, time, level, unit, message, terminationStatus
    }
}

query processLogs ($service: String!, $instance: String!, $directory: String!, $process: String!,
             $from: BigInt, $to: BigInt, $fromTime: Date, $toTime: Date, $levels: [String!], $find: String, $limit: Int) {
    logs (service: $service, instance: $instance, directory: $directory, process: $process,
        from: $from, to: $to, fromTime: $fromTime, toTime: $toTime, levels: $levels, find: $find, limit: $limit) {
            sequence, time, level, unit, message, terminationStatus
    }
}

# Faults

query faultDistributions {
    faultDistributions
}

query faultServices ($distribution: String) {
    faultServices (distribution: $distribution)
}

query faultsStartTime ($distribution: String, $service: String) {
    faultsStartTime (distribution: $distribution, service: $service)
}

query faultsEndTime ($distribution: String, $service: String) {
    faultsEndTime (distribution: $distribution, service: $service)
}

query faults ($distribution: String, $service: String, $fromTime: Date, $toTime: Date) {
    faults (distribution: $distribution, service: $service, fromTime: $fromTime, toTime: $toTime) {
        distribution, fault, info { time, instance, service, serviceDirectory, serviceRole, state { time, installTime, startTime, version { distribution, developerBuild, clientBuild }, updateToVersion { distribution, developerBuild, clientBuild }, updateError { critical, error }, failuresCount, lastExitCode }, logTail { time, level, unit, message, terminationStatus } }, files { path, time, length }
    }
}

query fault ($fault: String!) {
    faults (fault: $fault) {
        distribution, fault, info { time, instance, service, serviceDirectory, serviceRole, state { time, installTime, startTime, version { distribution, developerBuild, clientBuild }, updateToVersion { distribution, developerBuild, clientBuild }, updateError { critical, error }, failuresCount, lastExitCode }, logTail { time, level, unit, message, terminationStatus } }, files { path, time, length }
    }
}

# Accounts

query accountsList {
    accountsList
}

query userAccountsInfo {
    userAccountsInfo { account, name, role, properties { email, notifications } }
}

query userAccountInfo ($account: String!) {
    userAccountsInfo (account: $account) { account, name, role, properties { email, notifications } }
}

query serviceAccountsInfo {
    serviceAccountsInfo { account, name, role }
}

query serviceAccountInfo ($account: String!) {
    serviceAccountsInfo (account: $account) { account, name, role }
}

query consumerAccountsInfo {
    consumerAccountsInfo { account, name, role, properties { url, profile } }
}

query consumerAccountInfo ($account: String!) {
    consumerAccountsInfo (account: $account) { account, name, role, properties { url, profile } }
}

query accessToken ($account: String!) {
    accessToken (account: $account)
}

mutation addUserAccount ($account: String!, $name: String!, $role: AccountRole!, $password: String!, $properties: UserAccountPropertiesInput!) {
    addUserAccount (account: $account, name: $name, role: $role, password: $password, properties: $properties)
}

mutation changeUserAccount ($account: String!, $name: String, $role: AccountRole!, $oldPassword: String, $password: String, $properties: UserAccountPropertiesInput) {
    changeUserAccount (account: $account, name: $name, role: $role, oldPassword: $oldPassword, password: $password, properties: $properties)
}

mutation addServiceAccount ($account: String!, $name: String!, $role: AccountRole!) {
    addServiceAccount (account: $account, name: $name, role: $role)
}

mutation changeServiceAccount ($account: String!, $name: String, $role: AccountRole!) {
    changeServiceAccount (account: $account, name: $name, role: $role)
}

mutation addConsumerAccount ($account: String!, $name: String!, $properties: ConsumerAccountPropertiesInput!) {
    addConsumerAccount (account: $account, name: $name, properties: $properties)
}

mutation changeConsumerAccount ($account: String!, $name: String, $properties: ConsumerAccountPropertiesInput) {
    changeConsumerAccount (account: $account, name: $name, properties: $properties)
}

mutation removeAccount ($account: String!) {
    removeAccount (account: $account)
}

# Build configs

query buildDeveloperServices {
    buildDeveloperServicesConfig { service }
}

query buildDeveloperServiceConfig ($service: String!) {
    buildDeveloperServicesConfig (service: $service) {
        service, distribution, environment { name, value },
        repositories { name, git { url, branch, cloneSubmodules }, subDirectory },
        privateFiles { path, time, length }, macroValues { name, value } }
}

query buildClientServices {
    buildClientServicesConfig { service }
}

query buildClientServiceConfig ($service: String!) {
    buildClientServicesConfig (service: $service) {
        service, distribution, environment { name, value },
        repositories { name, git { url, branch, cloneSubmodules }, subDirectory },
        privateFiles { path, time, length }, macroValues { name, value }
    }
}

mutation setBuildDeveloperServiceConfig ($service: String!, $distribution: String,
        $environment: [NamedStringValueInput!]!,  $repositories: [RepositoryInput!]!,
        $privateFiles: [FileInfoInput!]!, $macroValues: [NamedStringValueInput!]!) {
    setBuildDeveloperServiceConfig (service: $service, distribution: $distribution,
        environment: $environment, repositories: $repositories, privateFiles: $privateFiles, macroValues: $macroValues)
}

mutation removeBuildDeveloperServiceConfig ($service: String!) {
    removeBuildDeveloperServiceConfig (service: $service)
}

mutation setBuildClientServiceConfig ($service: String!, $distribution: String,
        $environment: [NamedStringValueInput!]!, $repositories: [RepositoryInput!]!,
        $privateFiles: [FileInfoInput!]!, $macroValues: [NamedStringValueInput!]!) {
    setBuildClientServiceConfig (service: $service, distribution: $distribution,
        environment: $environment, repositories: $repositories, privateFiles: $privateFiles, macroValues: $macroValues)
}

mutation removeBuildClientServiceConfig ($service: String!) {
    removeBuildClientServiceConfig (service: $service)
}

# Profiles

query serviceProfiles {
    serviceProfiles { profile }
}

query profileServices ($profile: String!) {
    serviceProfiles (profile: $profile) { services }
}

mutation addServicesProfile ($profile: String!, $services: [String!]!) {
    addServicesProfile (profile: $profile, services: $services)
}

mutation changeServicesProfile ($profile: String!, $services: [String!]!) {
    changeServicesProfile (profile: $profile, services: $services)
}

mutation removeServicesProfile ($profile: String!) {
    removeServicesProfile (profile: $profile)
}

# Providers

query providersInfo {
    providersInfo {
        distribution, url, accessToken, testConsumer, uploadState, autoUpdate
    }
}

mutation addProvider ($distribution: String!, $url: String!, $accessToken: String!, $testConsumer: String,
                      $uploadState: Boolean!, $autoUpdate: Boolean!) {
    addProvider (distribution: $distribution, url: $url, accessToken: $accessToken, testConsumer: $testConsumer,
        uploadState: $uploadState, autoUpdate: $autoUpdate)
}

mutation changeProvider ($distribution: String!, $url: String!, $accessToken: String!, $testConsumer: String,
                         $uploadState: Boolean!, $autoUpdate: Boolean!) {
    changeProvider (distribution: $distribution, url: $url, accessToken: $accessToken, testConsumer: $testConsumer,
        uploadState: $uploadState, autoUpdate: $autoUpdate)
}

mutation removeProvider ($distribution: String!) {
    removeProvider (distribution: $distribution)
}

query providerDesiredVersions ($distribution: String!) {
    providerDesiredVersions (distribution: $distribution) {
        service, version { distribution, build }
    }
}

# Subscriptions

subscription subscribeLogs ($service: String, $instance: String, $process: String,
        $directory: String, $task: String, $levels: [String!], $unit: String, $find: String) {
    subscribeLogs (service: $service, instance: $instance, process: $process,
                   directory: $directory, task: $task, levels: $levels, unit: $unit, find: $find) {
        sequence, time, level, instance, process, message, terminationStatus
    }
}

# Tasks

query taskTypes {
    taskTypes
}

query taskServices {
    taskServices
}

query tasks ($task: String, $type: String, $parameters: [TaskParameterInput!], $service: String,
             $onlyActive: Boolean, $fromTime: Date, $toTime: Date, $from: BigInt, $limit: Int) {
    tasks (task: $task, type: $type, parameters: $parameters, service: $service, onlyActive: $onlyActive,
           fromTime: $fromTime, toTime: $toTime, from: $from, limit: $limit) {
        sequence, task, type, parameters { name, value }, services, creationTime, terminationTime, terminationStatus, expireTime
    }
}

mutation cancelTask ($task: String!) {
    cancelTask (task: $task)
}
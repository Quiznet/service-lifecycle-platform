# Login

mutation login($account: String!, $password: String!) {
    login(account: $account, password: $password)
}

# Info

query whoAmI {
    whoAmI { account, name, role }
}

query distributionInfo {
    distributionInfo { distribution, title }
}

# Developer Versions

query developerVersionsInProcess ($service: String) {
    developerVersionsInProcess (service: $service) {
        service, version { build }, author, sources { name, git { url, branch, cloneSubmodules } }, comment, task, startTime
    }
}

query developerVersionsInfo ($service: String, $version: DeveloperVersionInput) {
    developerVersionsInfo (service: $service, version: $version) {
        service, version { distribution, build }, buildInfo { author, sources { name, git { url, branch, cloneSubmodules } }, time, comment }
    }
}

query developerDesiredVersions {
    developerDesiredVersions { service, version { distribution, build } }
}

query providerDesiredVersions ($distribution: String!) {
    providerDesiredVersions (distribution: $distribution) { service, version { distribution, build } }
}

mutation buildDeveloperVersion ($service: String!, $version: DeveloperVersionInput!, $sources: [SourceConfigInput!]!, $comment: String!) {
    buildDeveloperVersion (service: $service, version: $version, sources: $sources, comment: $comment)
}

mutation addDeveloperVersionInfo ($info: DeveloperVersionInfoInput!) {
    addDeveloperVersionInfo (info: $info)
}

mutation removeDeveloperVersion ($service: String!, $version: DeveloperDistributionVersionInput!) {
    removeDeveloperVersion (service: $service, version: $version)
}

mutation setDeveloperDesiredVersions ($versions: [DeveloperDesiredVersionDeltaInput!]!) {
    setDeveloperDesiredVersions (versions: $versions)
}

# Client Versions

query clientVersionsInfo ($service: String, $version: ClientVersionInput) {
    clientVersionsInfo (service: $service, version: $version) {
        service, version { distribution, developerBuild, clientBuild }, buildInfo { author, sources { name, git { url, branch, cloneSubmodules } }, time, comment }, installInfo { account, time }
    }
}

query clientDesiredVersions {
    clientDesiredVersions { service, version { distribution, developerBuild, clientBuild } }
}

query installedDesiredVersions ($distribution: String!) {
    installedDesiredVersions (distribution: $distribution) {
        service, version { distribution, developerBuild, clientBuild }
    }
}

mutation updateClientVersions ($distribution: String!, $versions: [ DeveloperDesiredVersionInput!]!) {
    updateClientVersions (distribution: $distribution, versions: $versions)
}

mutation buildClientVersion ($service: String!, $version: ClientDistributionVersionInput!) {
    buildClientVersion (service: $service, version: $version)
}

mutation addClientVersionInfo ($info: ClientVersionInfoInput!) {
    addClientVersionInfo (info: $info)
}

mutation removeClientVersion ($service: String!, $version: ClientDistributionVersionInput!) {
    removeClientVersion (service: $service, version: $version)
}

mutation setClientDesiredVersions ($versions: [ClientDesiredVersionDeltaInput!]!) {
    setClientDesiredVersions (versions: $versions)
}

# States and logs

query serviceStates ($distribution: String!) {
    serviceStates (distribution: $distribution) {
        distribution, instance { instance, service, directory, state { time, installTime, startTime, version { distribution, developerBuild, clientBuild }, updateToVersion { distribution, developerBuild, clientBuild }, updateError { critical, error }, failuresCount, lastExitCode } }
    }
}

query serviceLogs ($distribution: String!, $service: String!, $instance: String!, $process: String!, $directory: String!) {
    serviceLogs (distribution: $distribution, service: $service, instance: $instance, process: $process, directory: $directory) {
        sequence, line { time, level, unit, message, terminationStatus }
    }
}

query taskLogs ($task: String!) {
    taskLogs (task: $task) {
        sequence, line { time, level, unit, message, terminationStatus }
    }
}

# Accounts

query accountsList {
    accountsList
}

query userAccountsInfo {
    userAccountsInfo { account, name, role, properties { email, notifications } }
}

query userAccountInfo ($account: String!) {
    userAccountsInfo (account: $account) { account, name, role, properties { email, notifications } }
}

query serviceAccountsInfo {
    serviceAccountsInfo { account, name, role }
}

query serviceAccountInfo ($account: String!) {
    serviceAccountsInfo (account: $account) { account, name, role }
}

query consumerAccountsInfo {
    consumerAccountsInfo { account, name, role, properties { url, profile } }
}

query consumerAccountInfo ($account: String!) {
    consumerAccountsInfo (account: $account) { account, name, role, properties { url, profile } }
}

query accessToken ($account: String!) {
    accessToken (account: $account)
}

mutation addUserAccount ($account: String!, $name: String!, $role: AccountRole!, $password: String!, $properties: UserAccountPropertiesInput!) {
    addUserAccount (account: $account, name: $name, role: $role, password: $password, properties: $properties)
}

mutation changeUserAccount ($account: String!, $name: String, $role: AccountRole!, $oldPassword: String, $password: String, $properties: UserAccountPropertiesInput) {
    changeUserAccount (account: $account, name: $name, role: $role, oldPassword: $oldPassword, password: $password, properties: $properties)
}

mutation addServiceAccount ($account: String!, $name: String!, $role: AccountRole!) {
    addServiceAccount (account: $account, name: $name, role: $role)
}

mutation changeServiceAccount ($account: String!, $name: String, $role: AccountRole!) {
    changeServiceAccount (account: $account, name: $name, role: $role)
}

mutation addConsumerAccount ($account: String!, $name: String!, $properties: ConsumerAccountPropertiesInput!) {
    addConsumerAccount (account: $account, name: $name, properties: $properties)
}

mutation changeConsumerAccount ($account: String!, $name: String, $properties: ConsumerAccountPropertiesInput) {
    changeConsumerAccount (account: $account, name: $name, properties: $properties)
}

mutation removeAccount ($account: String!) {
    removeAccount (account: $account)
}

# Sources

query developerServices {
    developerServices
}

query serviceSources ($service: String!) {
    serviceSources (service: $service) { name, git { url, branch, cloneSubmodules }  }
}

mutation addServiceSources ($service: String!, $sources: [SourceConfigInput!]!) {
    addServiceSources (service: $service, sources: $sources)
}

mutation changeServiceSources ($service: String!, $sources: [SourceConfigInput!]!) {
    changeServiceSources (service: $service, sources: $sources)
}

mutation removeServiceSources ($service: String!) {
    removeServiceSources (service: $service)
}

# Profiles

query serviceProfiles {
    serviceProfiles { profile }
    serviceProfiles { profile }
}

query profileServices ($profile: String!) {
    serviceProfiles (profile: $profile) { services }
}

mutation addServicesProfile ($profile: String!, $services: [String!]!) {
    addServicesProfile (profile: $profile, services: $services)
}

mutation changeServicesProfile ($profile: String!, $services: [String!]!) {
    changeServicesProfile (profile: $profile, services: $services)
}

mutation removeServicesProfile ($profile: String!) {
    removeServicesProfile (profile: $profile)
}

# Providers

query providersInfo {
    providersInfo {
        distribution, url, accessToken, testConsumer, uploadStateIntervalSec
    }
}

mutation addProvider ($distribution: String!, $url: String!, $accessToken: String!, $testConsumer: String, $uploadStateIntervalSec: Int!) {
    addProvider (distribution: $distribution, url: $url, accessToken: $accessToken, testConsumer: $testConsumer, uploadStateIntervalSec: $uploadStateIntervalSec)
}

mutation changeProvider ($distribution: String!, $url: String!, $accessToken: String!, $testConsumer: String, $uploadStateIntervalSec: Int!) {
    changeProvider (distribution: $distribution, url: $url, accessToken: $accessToken, testConsumer: $testConsumer, uploadStateIntervalSec: $uploadStateIntervalSec)
}

mutation removeProvider ($distribution: String!) {
    removeProvider (distribution: $distribution)
}

query providerDesiredVersions ($distribution: String!) {
    providerDesiredVersions (distribution: $distribution) {
        service, version { distribution, build }
    }
}

# Subscriptions

subscription subscribeTaskLogs ($task: String!, $from: Long) {
    subscribeTaskLogs (task: $task, from: $from) {
        sequence, line { time, level, unit, message, terminationStatus }
    }
}

subscription subscribeServiceLogs ($distribution: String!, $service: String!, $instance: String!, $process: String!,
        $directory: String!, $from: Long!) {
    subscribeServiceLogs (distribution: $distribution, service: $service, instance: $instance, process: $process,
            directory: $directory, from: $from) {
        sequence, line { time, level, unit, message, terminationStatus }
    }
}

# Cancel task

mutation cancelTask ($task: String!) {
    cancelTask (task: $task)
}
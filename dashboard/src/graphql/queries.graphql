# Login

mutation login($user: String!, $password: String!) {
    login(user: $user, password: $password)
}

# Info

query whoAmI {
    whoAmI { user, roles }
}

query distributionInfo {
    distributionInfo { distribution, title }
}

# Versions

query developerDesiredVersions {
    developerDesiredVersions { service, version { distribution, build } }
}

query clientDesiredVersions {
    clientDesiredVersions { service, version { distribution, developerBuild, clientBuild } }
}

query installedDesiredVersions ($distribution: String!) {
    installedDesiredVersions(distribution: $distribution) {
        service, version { distribution, developerBuild, clientBuild }
    }
}

# States

query serviceStates ($distribution: String!) {
    serviceStates(distribution: $distribution) {
        distribution, instance { instance, service, directory, state { date, installDate, startDate, version { distribution, developerBuild, clientBuild }, updateToVersion { distribution, developerBuild, clientBuild }, updateError { critical, error }, failuresCount, lastExitCode } }
    }
}

# Profiles

query usersInfo ($human: Boolean!) {
    usersInfo (human: $human) { user, human, name, roles, email, notifications }
}

query usersList {
    usersInfo { user }
}

query userInfo ($user: String!) {
    usersInfo (user: $user) { user, human, name, roles, email, notifications }
}

mutation addUser ($user: String!, $human: Boolean!, $name: String!, $password: String!, $roles: [UserRole!]!, $email: String, $notifications: [String!]) {
    addUser (user: $user, human: $human, name: $name, password: $password, roles: $roles, email: $email, notifications: $notifications)
}

mutation changeUser ($user: String!, $name: String, $oldPassword: String, $password: String, $roles: [UserRole!], $email: String, $notifications: [String!]) {
    changeUser (user: $user, name: $name, oldPassword: $oldPassword, password: $password, roles: $roles, email: $email, notifications: $notifications)
}

mutation removeUser ($user: String!) {
    removeUser (user: $user)
}

# Profiles

query serviceProfiles {
    serviceProfiles { profile }
}

query profileServices ($profile: String!) {
    serviceProfiles (profile: $profile) { services }
}

mutation addServicesProfile ($profile: String!, $services: [String!]!) {
    addServicesProfile (profile: $profile, services: $services)
}

mutation changeServicesProfile ($profile: String!, $services: [String!]!) {
    changeServicesProfile (profile: $profile, services: $services)
}

mutation removeServicesProfile ($profile: String!) {
    removeServicesProfile (profile: $profile)
}

# Providers

query providersInfo ($distribution: String!) {
    providersInfo (distribution: $distribution) {
        distribution, url, uploadStateInterval
    }
}

#mutation addProvider ($distribution: String!, $url: URL!, uploadStateInterval: FiniteDuration) {
#    addProvider (distribution: $distribution, url: $url, uploadStateInterval: $uploadStateInterval)
#}
#
#mutation changeProvider ($distribution: String!, $url: URL!, uploadStateInterval: FiniteDuration) {
#    changeProvider (distribution: $distribution, url: $url, uploadStateInterval: $uploadStateInterval)
#}

mutation removeProvider ($distribution: String!) {
    removeProvider (distribution: $distribution)
}

# Consumers

query consumersInfo {
    consumersInfo {
        distribution, profile, testConsumer
    }
}

mutation addConsumer ($distribution: String!, $profile: String!, $testConsumer: String) {
    addConsumer (distribution: $distribution, profile: $profile, testConsumer: $testConsumer)
}

mutation changeConsumer ($distribution: String!, $profile: String!, $testConsumer: String) {
    changeConsumer (distribution: $distribution, profile: $profile, testConsumer: $testConsumer)
}

mutation removeConsumer ($distribution: String!) {
    removeConsumer (distribution: $distribution)
}
